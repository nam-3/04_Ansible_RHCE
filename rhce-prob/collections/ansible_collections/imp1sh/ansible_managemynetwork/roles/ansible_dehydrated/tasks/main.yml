---
- name: Setting OS variables
  ansible.builtin.include_vars: "{{lookup('ansible.builtin.first_found', params)}}"
  vars:
    params:
      files:
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family }}.yml"
        - "default.yml"
      paths:
        - "vars"
# Installations
- name: Set package name for calling packages role
  ansible.builtin.set_fact:
    packages_installrole: "{{ dehydrated_packages }}"
- name: install required packages
  ansible.builtin.include_role:
    name: imp1sh.ansible_managemynetwork.ansible_packages
- name: Alpine install dehydrated manually from git
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/dehydrated-io/dehydrated/master/dehydrated
    dest: "{{ dehydrated_binpath }}"
    owner: root
    group: root
    mode: 0755
  when: ansible_distribution == "Alpine"
# Preparations
- name: Create dehydrated group
  ansible.builtin.group:
    name: dehydrated
    state: present
- name: Add users to dehydrated group
  ansible.builtin.user:
    name: "{{ item }}"
    groups: dehydrated
    append: true
  loop: "{{ dehydrated_users_groupadd }}"
  when: dehydrated_users_groupadd is defined
# create directories
- name: ensure dehydrated basedir directory
  ansible.builtin.file:
    path: "{{ dehydrated_basedir }}"
    state: directory
    mode: 0755
    owner: "{{ dehydrated_user }}"
    group: "{{ dehydrated_group }}"
- name: ensure dehydrated certs dir
  ansible.builtin.file:
    path: "{{ dehydrated_basedir }}/certs"
    state: directory
    recurse: true
    mode: 0740
    owner: "{{ dehydrated_user }}"
    group: "{{ dehydrated_group }}"
- name: ensure dehydrated wellknown path
  ansible.builtin.file:
    path: "{{ dehydrated_wellknown }}"
    state: directory
    recurse: true
    mode: 0750
    owner: "{{ dehydrated_user }}"
    group: "{{ dehydrated_group }}"
  when: dehydrated_wellknown is defined
- name: ensure accounts directory
  ansible.builtin.file:
    path: "{{ dehydrated_basedir }}/accounts"
    state: directory
    recurse: true
    mode: 0750
    owner: "{{ dehydrated_user }}"
    group: "{{ dehydrated_group }}"
- name: ensure chains directory
  ansible.builtin.file:
    path: "{{ dehydrated_basedir }}/chains"
    state: directory
    recurse: true
    mode: 0750
    owner: "{{ dehydrated_user }}"
    group: "{{ dehydrated_group }}"
- name: ensure acme-challenges directory
  ansible.builtin.file:
    path: "{{ dehydrated_basedir }}/acme-challenges"
    state: directory
    recurse: true
    mode: 0750
    owner: "{{ dehydrated_user }}"
    group: "{{ dehydrated_group }}"
# deploy files and jobs
- name: Install dehydrated config
  ansible.builtin.template:
    src: dehydratedconfig.j2
    dest: "{{ dehydrated_confdir }}/config"
    owner: "{{ dehydrated_user }}"
    group: "{{ dehydrated_group }}"
    mode: 0750
  notify: dehydrated cron
- name: Install nginx hook script
  ansible.builtin.template:
    src: nginxhook.j2
    dest: "{{ dehydrated_basedir }}/nginxhook.sh"
    mode: 0750
    owner: "{{ dehydrated_user }}"
    group: "{{ dehydrated_group }}"
- name: Fetch pdns_api.sh hook script from url
  get_url:
    url: https://raw.githubusercontent.com/silkeh/pdns_api.sh/master/pdns_api.sh
    dest: "{{ dehydrated_basedir }}/pdns_api.sh"
    mode: 0755
    owner: "{{ dehydrated_user }}"
    group: "{{ dehydrated_group }}"
- name: Install dehydrated domains.txt
  template:
    src: domains.j2
    dest: "{{ dehydrated_confdir }}/domains.txt"
    owner: "{{ dehydrated_user }}"
    group: "{{ dehydrated_group }}"
  when: dehydrated_domains is defined
  notify:
    - dehydrated cron
- name: Setup per-certificate domain config
  # https://github.com/dehydrated-io/dehydrated/blob/master/docs/per-certificate-config.md
  ansible.builtin.include_tasks:
    file: domainconfig.yml
  loop: "{{ dehydrated_domains }}"
  loop_control:
    loop_var: dehydrated_domain
# Accept terms and cron
- name: Run dehydrated to accept terms
  ansible.builtin.command: "{{ dehydrated_binpath }} --register --accept-terms"
- name: Setup dehydrated cronjob
  ansible.builtin.cron:
    name: renew certificates dehydrated
    minute: "0"
    hour: "12"
    job: "{{ dehydrated_binpath }} -c -g"
