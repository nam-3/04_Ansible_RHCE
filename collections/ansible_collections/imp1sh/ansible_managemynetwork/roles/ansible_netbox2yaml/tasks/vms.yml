---
# Fetching
- name: "Fetching all vms"
  ansible.builtin.set_fact:
    nb_vms_fetched: "{{ query('netbox.netbox.nb_lookup', 'virtual-machines', api_endpoint=NETBOX_URL, token=NETBOX_TOKEN) }}"
- name: "Fetching interfaces"
  ansible.builtin.set_fact:
    nb_interfaces_fetched: "{{ query('netbox.netbox.nb_lookup', 'virtualization-interfaces', api_endpoint=NETBOX_URL, token=NETBOX_TOKEN) }}"
- name: "Fetching IP addresses"
  ansible.builtin.set_fact:
    nb_ips_fetched: "{{ query('netbox.netbox.nb_lookup', 'ip-addresses',  api_filter='assigned_to_interface=True', api_endpoint=NETBOX_URL, token=NETBOX_TOKEN) }}"
- name: "filter ip addresses for vms only"
  ansible.builtin.set_fact:
    nb_ips_filtered: "{{ nb_ips_fetched | selectattr('value.assigned_object_type', '==', 'virtualization.vminterface') }}"
# Assembling IPs
- name: Configure IP json query
  ansible.builtin.set_fact:
    query_ips: '[].{id: value.assigned_object_id,
                    address: value.address,
                    family: value.family.value}'
- name: Build IPs dict
  ansible.builtin.set_fact:
    dict_ips: "{{ dict(nb_ips_filtered | json_query(query_ips)|groupby('id')) }}"
# Assembling Interfaces
- name: Configure interfaces json query
  ansible.builtin.set_fact:
    query_interfaces: '[].{id: value.virtual_machine.id,
                           name: value.name,
                           ips: key }'
- name: Builds interfaces dict
  ansible.builtin.set_fact:
    dict_interfaces: "{{ dict(nb_interfaces_fetched | json_query(query_interfaces)|groupby('id')) }}"
# Write to file
- name: write vms to file
  ansible.builtin.template:
    src: netbox_vms.jinja2
    dest: "{{ nb_vms_destination }}"
