########################################################
# This is the main config file for dehydrated          #
#                                                      #
# This file is looked for in the following locations:  #
# $SCRIPTDIR/config (next to this script)              #
# /usr/local/etc/dehydrated/config                     #
# /etc/dehydrated/config                               #
# ${PWD}/config (in current working-directory)         #
#                                                      #
# Default values of this config are in comments        #
########################################################

# Which user should dehydrated run as? This will be implictly enforced when running as root
#DEHYDRATED_USER=
{% if dehydrated_user is defined %}
DEHYDRATED_USER={{ dehydrated_user }}
{% endif %}

# Which group should dehydrated run as? This will be implictly enforced when running as root
#DEHYDRATED_GROUP=
{% if dehydrated_group is defined %}
DEHYDRATED_GROUP={{ dehydrated_group }}
{% endif %}

# Resolve names to addresses of IP version only. (curl)
# supported values: 4, 6
# default: <unset>
#IP_VERSION=
{% if dehydrated_ipversion is defined %}
IP_VERSION={{ dehydrated_ipversion }}
{% endif %}

# URL to certificate authority or internal preset
# # Presets: letsencrypt, letsencrypt-test, zerossl, buypass, buypass-test
# # default: letsencrypt
{% if dehydrated_ca is defined %}
CA="{{ dehydrated_ca }}"
{% endif %}

# Path to old certificate authority
# Set this value to your old CA value when upgrading from ACMEv1 to ACMEv2 under a different endpoint.
# If dehydrated detects an account-key for the old CA it will automatically reuse that key
# instead of registering a new one.
# default: https://acme-v01.api.letsencrypt.org/directory
#OLDCA="https://acme-v01.api.letsencrypt.org/directory"

# Which challenge should be used? Currently http-01, dns-01 and tls-alpn-01 are supported
#CHALLENGETYPE="http-01"
CHALLENGETYPE="{{ dehydrated_challengetype }}"

# Path to a directory containing additional config files, allowing to override
# the defaults found in the main configuration file. Additional config files
# in this directory needs to be named with a '.sh' ending.
# default: <unset>
#CONFIG_D=
{% if dehydrated_confd is defined %}
CONFIG_D={{ dehydrated_confd }}
{% endif %}

# Directory for per-domain configuration files.
# If not set, per-domain configurations are sourced from each certificates output directory.
# default: <unset>
#DOMAINS_D=
{% if dehydrated_domainsd is defined %}
DOMAINS_D={{ dehydrated_domainsd }}
{% endif %}

# Base directory for account key, generated certificates and list of domains (default: $SCRIPTDIR -- uses config directory if undefined)
#BASEDIR=$SCRIPTDIR
BASEDIR="{{ dehydrated_basedir }}"

# File containing the list of domains to request certificates for (default: $BASEDIR/domains.txt)
#DOMAINS_TXT="${BASEDIR}/domains.txt"
{% if dehydrated_domainstxt is defined %}
DOMAINS_TXT="{{ dehydrated_domainstxt }}"
{% endif %}

# Output directory for generated certificates
#CERTDIR="${BASEDIR}/certs"
{% if dehydrated_certdir is defined %}
CERTDIR="{{ dehydrated_certdir }}"
{% endif %}

# Output directory for alpn verification certificates
#ALPNCERTDIR="${BASEDIR}/alpn-certs"
{% if dehydrated_alpncertdir is defined %}
ALPNCERTDIR="{{ dehydrated_alpncertdir }}"
{% endif %}

# Directory for account keys and registration information
#ACCOUNTDIR="${BASEDIR}/accounts"
{% if dehydrated_accountdir is defined %}
ACCOUNTDIR="{{ dehydrated_accountdir }}"
{% endif %}

# Output directory for challenge-tokens to be served by webserver or deployed in HOOK (default: /var/www/dehydrated)
#WELLKNOWN="/var/www/dehydrated"
{% if dehydrated_wellknown is defined %}
WELLKNOWN="{{ dehydrated_wellknown }}"
{% endif %}

# Default keysize for private keys (default: 4096)
#KEYSIZE="4096"
{% if dehydrated_keysize is defined %}
KEYSIZE="{{ dehydrated_keysize }}"
{% endif %}

# Path to openssl config file (default: <unset> - tries to figure out system default)
#OPENSSL_CNF=

# Path to OpenSSL binary (default: "openssl")
#OPENSSL="openssl"

# Extra options passed to the curl binary (default: <unset>)
#CURL_OPTS=

# Program or function called in certain situations
#
# After generating the challenge-response, or after failed challenge (in this case altname is empty)
# Given arguments: clean_challenge|deploy_challenge altname token-filename token-content
#
# After successfully signing certificate
# Given arguments: deploy_cert domain path/to/privkey.pem path/to/cert.pem path/to/fullchain.pem
#
# BASEDIR and WELLKNOWN variables are exported and can be used in an external program
# default: <unset>
{% if dehydrated_hook is defined %}
HOOK="{{ dehydrated_hook }}"
{% endif %}

# Chain clean_challenge|deploy_challenge arguments together into one hook call per certificate (default: no)
#HOOK_CHAIN="no"
{% if dehydrated_hookchain is defined %}
HOOK_CHAIN="{{ dehydrated_hookchain }}"
{% endif %}

# Minimum days before expiration to automatically renew certificate (default: 30)
#RENEW_DAYS="30"
{% if dehydrated_renewdays is defined %}
RENEW_DAYS="{{ dehydrated_renewdays }}"
{% endif %}

# Regenerate private keys instead of just signing new certificates on renewal (default: yes)
#PRIVATE_KEY_RENEW="yes"

# Create an extra private key for rollover (default: no)
#PRIVATE_KEY_ROLLOVER="no"

# Which public key algorithm should be used? Supported: rsa, prime256v1 and secp384r1
#KEY_ALGO=rsa

# E-mail to use during the registration (default: <unset>)
#CONTACT_EMAIL=
{% if dehydrated_contactemail is defined %}
CONTACT_EMAIL={{ dehydrated_contactemail }}
{% endif %}

# Lockfile location, to prevent concurrent access (default: $BASEDIR/lock)
#LOCKFILE="${BASEDIR}/lock"

# Option to add CSR-flag indicating OCSP stapling to be mandatory (default: no)
#OCSP_MUST_STAPLE="no"

# Fetch OCSP responses (default: no)
#OCSP_FETCH="no"

# OCSP refresh interval (default: 5 days)
#OCSP_DAYS=5

# Issuer chain cache directory (default: $BASEDIR/chains)
#CHAINCACHE="${BASEDIR}/chains"

# Automatic cleanup (default: no)
#AUTO_CLEANUP="no"

# ACME API version (default: auto)
#API=auto

# pdns api config
{% if dehydrated_pdnshost is defined %}
PDNS_HOST={{ dehydrated_pdnshost }}
{% endif %}
{% if dehydrated_pdnskey is defined %}
PDNS_KEY={{ dehydrated_pdnskey }}
{% endif %}
{% if dehydrated_pdnsversion is defined %}
PDNS_VERSION={{ dehydrated_pdnsversion }}
{% endif %}
{% if dehydrated_pdnswait is defined %}
PDNS_WAIT={{ dehydrated_pdnswait }}
{% endif %}
{% if dehydrated_pdnsnonotiry is defined %}
PDNS_NO_NOTIFY={{ dehydrated_pdnsnonotify }}
{% endif %}
{% if dehydrated_pdnsdeploycerthook is defined %}
PDNS_DEPLOY_CERT_HOOK="{{ dehydrated_pdnsdeploycerthook }}"
{% endif %}
{% if dehydrated_pdnsexithook is defined %}
PDNS_EXIT_HOOK="{{ dehydrated_pdnsexithook }}"
{% endif %}
