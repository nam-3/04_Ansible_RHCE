---
############################################
# [3-Tier Architecture 구현]
# Play1 : WEB-PHP-DB 구현
# 1. 웹 서버 + 방화벽 설정
# 1) WEB 패키지 설치
# 2) WEB 서비스 설정
# 3) WEB 서비스 기동
# 4) 방화벽에 등록
#
# 2. DB 설정
# 1) DB 패키지 설치
# 2) DB 서비스 기동
# 3) DB 서비스 설정
# 4) 방화벽 등록
############################################
# Play2 : 웹 확인
############################################
- name: 3-Tier Architecture 구현
  hosts: webservers
  tasks:
  # Play1 : WEB-PHP-DB 구현
  #
  # 1. 웹 서버 + 방화벽 설정
  #
  # 1) WEB 패키지 설치
  # * 웹 패키지 : httpd, mod_ssl
  # * PHP 패키지 : php, php-mysqlnd, php-pdo
  # * 방화벽 패키지 : firewalld
  - name: 1) WEB 패키지 설치
    ansible.builtin.dnf:
      name:
        - httpd
        - mod_ssl
        - php
        - php-mysqlnd
        - php-pdo
        - firewalld
      state: present
  
  - name: 2) WEB 서비스 설정 - (get_url) /var/www/html/index.php
    ansible.builtin.get_url:
      # 해당 url에서 받아와서 dest에 저장
      url: http://192.168.10.10/index.php
      dest: /var/www/html/index.php
      mode: '0644'
      # ansible-doc에서 mode: 0440 이라고 안내됨, owner와 group 권한이 있는 모듈임

  - name: 3) WEB 서비스 기동 - httpd, firewalld
    ansible.builtin.systemd:
      name: "{{ item }}"
      state: started
      enabled: true
    loop:
      - httpd
      - firewalld

  - name: 4) 방화벽에 등록 - (firewalld) http, https
    ansible.builtin.firewalld:
      service:  "{{ item }}"
      permanent: true
      immediate: true
      state: enabled
    loop:
      - http
      - https

  #
  # 2. DB 설정
  #
  - name: 1) DB 패키지 설치 - mariadb, mariadb-server, python3-PyMySQL
    ansible.builtin.dnf:
      name:
        - mariadb
        - mariadb-server
        - python3-PyMySQL
      state: present

  - name: 2) DB 서비스 기동
    ansible.builtin.systemd:
      name: mariadb
      state: started
      enabled: true

  # - name: 3) DB 서비스 설정 - (mysql_user) mysql_secure_install, root 암호 변경  ''-> ansible
  #   [주의]처음 한 번만 실행
  #   ##########################################################
  #   # mysql_secure_installation 스크립트
  #   # * root 암호 변경(인증 방식 unix_socket)
  #   # * root 사용자 원격 접속 차단
  #   # * 익명 사용자 제거 
  #   # * test DB 제거
  #   # * 권한 적용
  #   ##########################################################
  
  # - name : 3) DB 서비스 설정 - mysql_secure_installation
  #   become: true
  #   ansible.builtin.expect:
  #     command: mysql_secure_install
  #     responses:
  #       'Enter current password for root': '0644'
  #       'Switch to unix_socket authentication': 'Y'
  #       'Change the root password?': 'Y'
  #       'New password:': 'ansible'
  #       'Re-enter new password': 'ansible'
  #       'Remove anonymous users?': 'Y'
  #       'Disallow root login remotely?': 'Y'
  #       'Remove test database and access to it?': 'Y'
  #       'Reload privilege tables now?': 'Y'
  #     timeout: 10
      # key-value 쌍으로 응답을 지정 , 띄어쓰기에 유의할 것. key: value

  - name: 4) 방화벽 등록 - (firewalld) mysql
    ansible.builtin.firewalld:
      service:  mysql
      permanent: true
      immediate: true
      state: enabled

############################################
# Play2 : 웹 확인
############################################
- name: 웹 요청에 대한 확인
  hosts: localhost
  become: false
  tasks:
  - name: 1) web1.example.com/index.php 웹 페이지 확인
    ansible.builtin.uri:
      url: http://192.168.10.10/index.php
      status_code: 200 
      return_content: true
    register: output

  - name: 2) 웹 페이지 내용 출력 (debug)
    ansible.builtin.debug:
      var: output.server